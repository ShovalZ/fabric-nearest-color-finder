{"version":3,"sources":["palettes/fabric.ts","palettes/fluent.ts","context/SelectedPaletteContext.ts","hooks/useSelectedPalette.ts","utils/nearest-color.ts","components/CopyableInput.tsx","components/Output.tsx","components/ClosestColor.tsx","components/Palette.tsx","components/PaletteContainer.tsx","components/PaletteSummary/ColorItemSummary.tsx","components/PaletteSummary/PaletteSummary.tsx","components/PaletteSummary/PaletteSummaryContainer.tsx","components/Palettes.tsx","App.tsx","palettes/m365.ts","index.tsx"],"names":["FabricPalette","displayName","palette","DefaultPalette","FluentPalette","FluentTheme","SelectedPaletteContext","React","createContext","selectedPalette","setSelectedPalette","useSelectedPalette","useContext","nearestFromPalette","memoize","nearestFrom","CopyableInput","props","react_default","a","createElement","TextField","Object","assign","styles","prefix","marginRight","field","padding","suffix","backgroundColor","marginLeft","onRenderSuffix","ActionButton","iconProps","iconName","disabled","value","onClick","copy","Output","_ref","color","OutputStyle","readOnly","borderless","label","rawColor","onRenderPrefix","ColorBox","colorCode","styled","div","_templateObject","_templateObject2","_ref2","HEX_PATTERN","ClosestColor","_React$useState","useState","_React$useState2","slicedToArray","input","setInput","nearestColor","test","nearestColorMatch","Array","isArray","Error","name","rawValue","nearestColorInPalette","concat","ClosestColorStyle","onChange","_e","newValue","onPaste","e","text","clipboardData","getData","startsWith","preventDefault","slice","Separator","vertical","root","selectors","&:after","theme","neutralQuaternaryAlt","Output_Output","section","ClosestColor_templateObject","Palette","paletteItems","entries","map","_ref3","DetailsList","items","compact","columns","selectionMode","SelectionMode","none","ColorSample","Palette_templateObject","key","minWidth","maxWidth","isResizable","onRender","item","isSorted","fieldName","PaletteContainer","PaletteContainerStyle","PaletteContainer_ClosestColorSection","PaletteContainer_PaletteSection","main","PaletteContainer_templateObject","ClosestColorSection","Fragment","Header","PaletteSection","h2","PaletteContainer_templateObject2","ColorItemSummary","ColorItemSummary_templateObject","PaletteSummaryStyle","PaletteSummary_templateObject","PaletteSummary","colorItems","PaletteSummaryContainerStyle","button","PaletteSummaryContainer_templateObject","isSelected","PaletteName","PaletteSummaryContainer_templateObject2","PaletteSummaryContainer","paletteName","onPaletteClick","Palettes","palettes","_useSelectedPalette","PalettesStyle","displayPalette","Palettes_templateObject","green","greenDark","orange","themePrimary","black","white","initializeIcons","ReactDOM","render","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.4eb63625.chunk.js","sourcesContent":["import { DefaultPalette } from '@uifabric/styling';\nimport { IDisplayPalette } from './IDisplayPalette';\n\nexport const FabricPalette: IDisplayPalette = {\n  displayName: 'Fabric',\n  palette: DefaultPalette,\n};\n","import { FluentTheme } from '@uifabric/fluent-theme';\nimport { IDisplayPalette } from './IDisplayPalette';\n\nexport const FluentPalette: IDisplayPalette = {\n  displayName: 'Fluent',\n  palette: FluentTheme.palette,\n};\n","import React from 'react';\nimport { IDisplayPalette } from '../palettes/IDisplayPalette';\nimport { FabricPalette } from '../palettes/fabric';\n\nexport interface SelectedPaletteContext {\n  selectedPalette: IDisplayPalette;\n  setSelectedPalette: (displayPalette: IDisplayPalette) => void;\n}\n\nexport const SelectedPaletteContext = React.createContext<SelectedPaletteContext>({\n  selectedPalette: FabricPalette,\n  setSelectedPalette: () => {},\n});\n","import React from 'react';\nimport { SelectedPaletteContext } from '../context/SelectedPaletteContext';\n\nexport function useSelectedPalette() {\n  return React.useContext(SelectedPaletteContext);\n}\n","import { nearestFrom } from 'nearest-colors';\nimport { IPalette } from '@uifabric/styling';\nimport { memoize } from 'lodash';\n\nconst nearestFromPalette = memoize((palette: IPalette) => nearestFrom(palette as {}));\n\nexport function nearestColorInPalette(color: string, palette: IPalette) {\n  const nearestColorMatch = nearestFromPalette(palette)(color);\n\n  if (Array.isArray(nearestColorMatch)) {\n    // TODO: handle this\n    throw new Error('Unexpected output');\n  }\n\n  return {\n    name: nearestColorMatch.name,\n    rawValue: nearestColorMatch.value,\n  };\n}\n","import React from 'react';\nimport copy from 'clipboard-copy';\n\nimport { TextField, ITextFieldProps, ActionButton } from 'office-ui-fabric-react';\n\nexport interface CopyableInputProps extends ITextFieldProps {}\n\nexport function CopyableInput(props: CopyableInputProps) {\n  return (\n    <TextField\n      {...props}\n      styles={{\n        prefix: { marginRight: '8px' },\n        field: { padding: '0' },\n        suffix: { backgroundColor: 'inherit', padding: 0, marginLeft: '8px' },\n      }}\n      onRenderSuffix={() => {\n        return (\n          <ActionButton iconProps={{ iconName: 'Copy' }} disabled={!props.value} onClick={() => copy(props.value!)} />\n        );\n      }}\n    />\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { TextField } from 'office-ui-fabric-react';\n\nimport { CopyableInput } from './CopyableInput';\n\nexport interface Color {\n  displayName?: string;\n  rawColor: string;\n}\n\nexport interface OutputProps {\n  color?: Color | null;\n}\n\nexport const Output: React.FC<OutputProps> = ({ color }) => {\n  return (\n    <OutputStyle>\n      <CopyableInput readOnly borderless label=\"Semantic name:\" value={color ? color.displayName : ''} />\n      <CopyableInput\n        readOnly\n        borderless\n        label=\"Raw value:\"\n        value={color ? color.rawColor : ''}\n        onRenderPrefix={() => <ColorBox colorCode={color ? color.rawColor : null} />}\n      />\n    </OutputStyle>\n  );\n};\n\nconst OutputStyle = styled.div`\n  display: grid;\n  grid-auto-flow: column;\n  grid-gap: 10px;\n  grid-auto-columns: max-content;\n`;\n\ninterface ColorBoxProps {\n  colorCode?: string | null;\n}\n\nconst ColorBox = styled.div`\n  background-color: ${({ colorCode }: ColorBoxProps) => (colorCode ? colorCode : 'inherit')};\n  width: 1rem;\n  height: 1rem;\n`;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { IPalette, TextField, Separator } from 'office-ui-fabric-react';\n\nimport { nearestColorInPalette } from '../utils/nearest-color';\nimport { Output } from './Output';\n\nexport interface ClosestColorProps {\n  palette: IPalette;\n}\n\nconst HEX_PATTERN = /^([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n\nexport function ClosestColor({ palette }: ClosestColorProps) {\n  const [input, setInput] = React.useState('');\n\n  const isValidHexColor = HEX_PATTERN.test(input);\n  const nearestColor = isValidHexColor ? nearestColorInPalette(`#${input}`, palette) : null;\n\n  return (\n    <ClosestColorStyle>\n      <TextField\n        label=\"Input\"\n        prefix=\"#\"\n        value={input}\n        onChange={(_e, newValue) => setInput(newValue!)}\n        onPaste={e => {\n          const text = e.clipboardData.getData('text');\n          if (text.startsWith('#')) {\n            e.preventDefault();\n            setInput(text.slice(1));\n          }\n        }}\n      />\n      <Separator\n        vertical\n        styles={({ theme }) => ({\n          root: {\n            selectors: { '&:after': { backgroundColor: theme.palette.neutralQuaternaryAlt } },\n          },\n        })}\n      />\n      <Output color={nearestColor && { displayName: nearestColor.name, rawColor: nearestColor.rawValue }} />\n    </ClosestColorStyle>\n  );\n}\n\nconst ClosestColorStyle = styled.section`\n  display: grid;\n  grid-auto-flow: column;\n  grid-auto-columns: auto auto 1fr;\n  grid-gap: 48px;\n`;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { DetailsList, IColumn, SelectionMode, IPalette } from 'office-ui-fabric-react';\n\nexport interface PaletteProps {\n  palette: IPalette;\n}\n\nexport function Palette({ palette }: PaletteProps) {\n  const paletteItems = Object.entries(palette).map(([name, rawColor]) => ({ name, rawColor }));\n  return <DetailsList items={paletteItems} compact columns={columns} selectionMode={SelectionMode.none} />;\n}\n\ninterface PaletteItem {\n  name: string;\n  rawColor: string;\n}\n\ninterface ColorSampleProps {\n  color: string;\n}\n\nconst ColorSample = styled.div`\n  border-radius: 50%;\n  width: 2rem;\n  height: 2rem;\n  background-color: ${(props: ColorSampleProps) => props.color};\n`;\n\nconst columns: IColumn[] = [\n  {\n    key: 'sample',\n    name: 'Color sample',\n    minWidth: 92,\n    maxWidth: 92,\n    isResizable: true,\n    onRender: (item: PaletteItem) => <ColorSample color={item.rawColor} />,\n  },\n  {\n    key: 'semantic-name',\n    name: 'Semantic name',\n    minWidth: 200,\n    maxWidth: 200,\n    isResizable: true,\n    isSorted: true,\n    fieldName: 'name' as keyof PaletteItem,\n  },\n  {\n    key: 'raw-color',\n    name: 'Raw color',\n    minWidth: 32,\n    maxWidth: 32,\n    isResizable: true,\n    fieldName: 'rawColor' as keyof PaletteItem,\n  },\n];\n","import React from 'react';\nimport styled from 'styled-components';\nimport { IPalette } from 'office-ui-fabric-react';\n\nimport { useSelectedPalette } from '../hooks/useSelectedPalette';\nimport { ClosestColor } from './ClosestColor';\nimport { Palette } from './Palette';\n\nexport function PaletteContainer() {\n  const { selectedPalette } = useSelectedPalette();\n\n  return (\n    <PaletteContainerStyle>\n      <ClosestColorSection palette={selectedPalette.palette} />\n      <PaletteSection palette={selectedPalette.palette} />\n    </PaletteContainerStyle>\n  );\n}\n\nconst PaletteContainerStyle = styled.main`\n  display: grid;\n  grid-gap: 1.5rem;\n  margin: 3rem;\n`;\n\nconst ClosestColorSection = ({ palette }: { palette: IPalette }) => (\n  <>\n    <Header>Closest color finder</Header>\n    <ClosestColor palette={palette} />\n  </>\n);\n\nconst PaletteSection = ({ palette }: { palette: IPalette }) => (\n  <>\n    <Header>Palette</Header>\n    <Palette palette={palette} />\n  </>\n);\n\nconst Header = styled.h2`\n  margin: 0;\n`;\n","import styled from 'styled-components';\n\nexport interface ColorItemSummaryProps {\n  rawColor: string;\n}\n\nexport const ColorItemSummary = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 1rem;\n  width: 1rem;\n  background-color: ${(props: ColorItemSummaryProps) => props.rawColor};\n`;\n","import React from 'react';\nimport { IPalette } from '@uifabric/styling';\n\nimport { ColorItemSummary } from './ColorItemSummary';\nimport styled from 'styled-components';\n\nexport interface PaletteSummaryProps {\n  palette: IPalette;\n}\n\nconst PaletteSummaryStyle = styled.div`\n  display: grid;\n  width: fit-content;\n  grid-template-columns: repeat(7, 1fr);\n`;\n\nexport function PaletteSummary({ palette }: PaletteSummaryProps) {\n  const colorItems = Object.entries(palette).map(([name, value]) => {\n    return <ColorItemSummary key={name} rawColor={value} />;\n  });\n\n  return <PaletteSummaryStyle>{colorItems}</PaletteSummaryStyle>;\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { IPalette } from '@uifabric/styling';\n\nimport { PaletteSummary } from './PaletteSummary';\n\nexport interface PaletteSummaryContainerProps {\n  paletteName: string;\n  palette: IPalette;\n  isSelected?: boolean;\n  onPaletteClick?: () => void;\n}\n\ninterface PaletteSummaryContainerStyleProps {\n  isSelected?: boolean;\n}\n\nconst PaletteSummaryContainerStyle = styled.button`\n  outline: ${(props: PaletteSummaryContainerStyleProps) => props.isSelected && '#0000ff85 solid 3px'};\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 0.5rem;\n  background: unset;\n`;\n\nconst PaletteName = styled.h2`\n  margin: 0;\n`;\n\nexport function PaletteSummaryContainer({\n  paletteName,\n  palette,\n  isSelected,\n  onPaletteClick,\n}: PaletteSummaryContainerProps) {\n  return (\n    <PaletteSummaryContainerStyle isSelected={isSelected} onClick={onPaletteClick}>\n      <PaletteName>{paletteName}</PaletteName>\n      <PaletteSummary palette={palette} />\n    </PaletteSummaryContainerStyle>\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { IDisplayPalette } from '../palettes/IDisplayPalette';\nimport { PaletteSummaryContainer } from './PaletteSummary/PaletteSummaryContainer';\nimport { useSelectedPalette } from '../hooks/useSelectedPalette';\n\nexport interface PalettesProps {\n  palettes: ReadonlyArray<IDisplayPalette>;\n}\n\nexport function Palettes({ palettes }: PalettesProps) {\n  const { selectedPalette, setSelectedPalette } = useSelectedPalette();\n\n  return (\n    <PalettesStyle>\n      {palettes.map(displayPalette => {\n        return (\n          <PaletteSummaryContainer\n            key={displayPalette.displayName}\n            paletteName={displayPalette.displayName}\n            palette={displayPalette.palette}\n            isSelected={selectedPalette && selectedPalette.palette === displayPalette.palette}\n            onPaletteClick={() => setSelectedPalette(displayPalette)}\n          />\n        );\n      })}\n    </PalettesStyle>\n  );\n}\n\nconst PalettesStyle = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));\n`;\n","import React from 'react';\n\nimport { FabricPalette } from './palettes/fabric';\nimport { FluentPalette } from './palettes/fluent';\nimport { IDisplayPalette } from './palettes/IDisplayPalette';\nimport { M365Palette } from './palettes/m365';\nimport { PaletteContainer } from './components/PaletteContainer';\nimport { Palettes } from './components/Palettes';\nimport { SelectedPaletteContext } from './context/SelectedPaletteContext';\n\nconst palettes: IDisplayPalette[] = [FabricPalette, FluentPalette, M365Palette];\n\nexport function App() {\n  const [selectedPalette, setSelectedPalette] = React.useState<IDisplayPalette>(FabricPalette);\n\n  return (\n    <SelectedPaletteContext.Provider value={{ selectedPalette, setSelectedPalette }}>\n      <Palettes palettes={palettes} />\n      <PaletteContainer />\n    </SelectedPaletteContext.Provider>\n  );\n}\n","import { IDisplayPalette } from './IDisplayPalette';\n\nexport const M365Palette: IDisplayPalette = {\n  displayName: 'M365',\n  palette: {\n    green: '#6bb700',\n    greenDark: '#107C10',\n    orange: '#F2610C',\n    themePrimary: '#0078D4',\n    black: '#000000',\n    white: '#ffffff',\n  } as any,\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport { initializeIcons } from '@uifabric/icons';\n\ninitializeIcons();\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}